# Authorization Server Environment Configuration Example
# Copy this file to .env.local and fill in the actual values

############ SERVER ENV ###########
# 애플리케이션 실행 환경
NODE_ENV=development
# HTTP API 서버 포트 (클라이언트 접근용)
PORT=8100
# TCP 마이크로서비스 포트 (서비스간 통신용)
TCP_PORT=8110
# CORS 허용 도메인 (콤마로 구분)
CORS_ORIGINS="http://localhost:8100, http://127.0.0.1:8100, http://localhost:3000, http://127.0.0.1:3000, http://localhost:3200, http://localhost:3210, http://localhost:3300, http://localhost:3310"
# 애플리케이션 이름
APP_NAME=authz-server

############ EXTERNAL SERVICE ENDPOINTS ############
# MSA 서비스 통신 설정 (선택사항)
# AUTH_SERVICE_HOST=auth-server
# AUTH_SERVICE_PORT=8010
# PORTAL_SERVICE_HOST=portal-server
# PORTAL_SERVICE_PORT=8210

############ DOCKER ENV ###########
# Docker 볼륨 경로 설정
MYSQL_VOLUME_PATH=./data/mysqldata
MYSQL_CONFIG_PATH=./config
REDIS_VOLUME_PATH=./data/redisdata

############ MYSQL ENV ############
# MySQL 서버 호스트 (Docker 컨테이너 이름)
# MYSQL_HOST=host.docker.internal  # Docker Desktop 사용시
MYSQL_HOST=authz-mysql
# MySQL 내부 포트 (컨테이너간 통신용)
MYSQL_PORT=3306
# MySQL 외부 접근 포트 (개발용 DB 툴 접속)
MYSQL_OPEN_PORT=3308
# MySQL 사용자명
MYSQL_USER=krgeobuk
# MySQL 사용자 비밀번호 (실제 값으로 변경 필요)
MYSQL_PASSWORD=your-mysql-password
# MySQL root 비밀번호 (실제 값으로 변경 필요)
MYSQL_ROOT_PASSWORD=your-mysql-root-password
# MySQL 데이터베이스 이름
MYSQL_DATABASE=authz

############ REDIS ENV ############
# Redis 서버 호스트 (Docker 컨테이너 이름)
# REDIS_HOST=host.docker.internal  # Docker Desktop 사용시
REDIS_HOST=authz-redis
# Redis 내부 포트 (컨테이너간 통신용)
REDIS_PORT=6379
# Redis 외부 접근 포트 (개발용 Redis 툴 접속)
REDIS_OPEN_PORT=6381
# Redis 비밀번호 (실제 값으로 변경 필요)
REDIS_PASSWORD=1234qwer

############ JWT ENV ############
# JWT 공개키 파일 경로 (auth-server에서 복사)
JWT_ACCESS_PUBLIC_KEY_PATH=./keys/access-public.key

# ============================================================================
# 설정 가이드
# ============================================================================
#
# 1. 이 파일을 .env.local로 복사하세요:
#    cp envs/.env.example envs/.env.local
#
# 2. 다음 값들을 실제 값으로 변경하세요:
#    - MYSQL_PASSWORD, MYSQL_ROOT_PASSWORD
#    - REDIS_PASSWORD
#
# 3. JWT 공개키 파일을 auth-server에서 복사하세요:
#    cp ../auth-server/keys/access-public.key ./keys/
#
# 4. Docker 환경을 시작하세요:
#    npm run docker:local:up
#
# 5. 개발 서버를 시작하세요:
#    npm run start:debug
#
# ============================================================================
# 포트 정보
# ============================================================================
#
# HTTP API Server: 8100
# TCP Microservice: 8110
# MySQL: 3308 (external), 3306 (internal)
# Redis: 6381 (external), 6379 (internal)
#
# ============================================================================
# 서비스 연동
# ============================================================================
#
# authz-server는 다음 서비스들과 통신합니다:
#
# - auth-server (TCP 8010): 사용자 정보 조회
# - portal-server (TCP 8210): 서비스 정보 조회
# - 클라이언트들: CORS 설정을 통한 HTTP API 접근
#   - auth-client (3000): 인증 페이지
#   - portal-client (3200): 포털 페이지
#
# ============================================================================